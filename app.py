from flask import Flask, render_template, request, jsonify, send_file
from deep_translator import GoogleTranslator
from gtts import gTTS
import random
import time
import os
import io
import tempfile

app = Flask(__name__)

# Language mapping for TTS
language_codes = {
    'en': 'en',
    'hi': 'hi',
    'te': 'te',
    'es': 'es',
    'fr': 'fr',
    'de': 'de',
    'it': 'it',
    'pt': 'pt',
    'ru': 'ru',
    'ja': 'ja',
    'ko': 'ko',
    'zh': 'zh',
    'ar': 'ar',
    'bn': 'bn',
    'ur': 'ur',
    'ta': 'ta',
    'ml': 'ml',
    'kn': 'kn',
    'gu': 'gu',
    'pa': 'pa'
}

# Language content with translations
language_content = {
    'en': {
        'welcome': "Hello! I'm here to support your mental health. How are you feeling today?",
        'placeholder': "Type your message...",
        'quotes': [
            "Peace comes from within. Do not seek it without. üßò‚Äç‚ôÄÔ∏è",
            "In the midst of winter, I found there was, within me, an invincible summer. ‚ùÑÔ∏è‚òÄÔ∏è",
            "The present moment is the only time over which we have dominion. ‚è∞",
            "Breathe in peace, breathe out stress. üå¨Ô∏è",
            "Calm mind brings inner strength and self-confidence. üí™"
        ],
        'jokes': [
            "ü§ñ Why don't robots ever panic? Because they have nerves of steel!",
            "üíª My computer keeps playing the same song... It's a Dell!",
            "üì± Why did the smartphone need glasses? It lost all its contacts!"
        ],
        'analysis': {
            'title': "Mental Health Analysis",
            'indicator': "Depression Indicator",
            'status': "Status",
            'factors': "Key Contributing Factors",
            'increase': "‚Üë = increases depression likelihood",
            'decrease': "‚Üì = decreases depression likelihood"
        }
    },
    'hi': {
        'welcome': "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•á ‡§Æ‡§æ‡§®‡§∏‡§ø‡§ï ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ï‡§æ ‡§∏‡§Æ‡§∞‡•ç‡§•‡§® ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡§π‡§æ‡§Ç ‡§π‡•Ç‡§Ç‡•§ ‡§Ü‡§ú ‡§Ü‡§™ ‡§ï‡•à‡§∏‡§æ ‡§Æ‡§π‡§∏‡•Ç‡§∏ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç?",
        'placeholder': "‡§Ö‡§™‡§®‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç...",
        'quotes': [
            "‡§∂‡§æ‡§Ç‡§§‡§ø ‡§≠‡•Ä‡§§‡§∞ ‡§∏‡•á ‡§Ü‡§§‡•Ä ‡§π‡•à‡•§ ‡§á‡§∏‡•á ‡§¨‡§æ‡§π‡§∞ ‡§Æ‡§§ ‡§¢‡•Ç‡§Ç‡§¢‡•ã‡•§ üßò‚Äç‚ôÄÔ∏è",
            "‡§∏‡§∞‡•ç‡§¶‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§¨‡•Ä‡§ö ‡§Æ‡•á‡§Ç, ‡§Æ‡•à‡§Ç‡§®‡•á ‡§™‡§æ‡§Ø‡§æ ‡§ï‡§ø ‡§Æ‡•á‡§∞‡•á ‡§≠‡•Ä‡§§‡§∞ ‡§è‡§ï ‡§Ö‡§ú‡•á‡§Ø ‡§ó‡§∞‡•ç‡§Æ‡•Ä ‡§•‡•Ä‡•§ ‚ùÑÔ∏è‚òÄÔ∏è",
            "‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§ï‡•ç‡§∑‡§£ ‡§π‡•Ä ‡§è‡§ï‡§Æ‡§æ‡§§‡•ç‡§∞ ‡§∏‡§Æ‡§Ø ‡§π‡•à ‡§ú‡§ø‡§∏ ‡§™‡§∞ ‡§π‡§Æ‡§æ‡§∞‡§æ ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞ ‡§π‡•à‡•§ ‚è∞",
            "‡§∂‡§æ‡§Ç‡§§‡§ø ‡§Æ‡•á‡§Ç ‡§∏‡§æ‡§Ç‡§∏ ‡§≤‡•á‡§Ç, ‡§§‡§®‡§æ‡§µ ‡§ï‡•ã ‡§õ‡•ã‡§°‡§º‡•á‡§Ç‡•§ üå¨Ô∏è",
            "‡§∂‡§æ‡§Ç‡§§ ‡§Æ‡§® ‡§Ü‡§Ç‡§§‡§∞‡§ø‡§ï ‡§∂‡§ï‡•ç‡§§‡§ø ‡§î‡§∞ ‡§Ü‡§§‡•ç‡§Æ‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏ ‡§≤‡§æ‡§§‡§æ ‡§π‡•à‡•§ üí™"
        ],
        'jokes': [
            "ü§ñ ‡§∞‡•ã‡§¨‡•ã‡§ü ‡§ï‡§≠‡•Ä ‡§ò‡§¨‡§∞‡§æ‡§§‡•á ‡§ï‡•ç‡§Ø‡•ã‡§Ç ‡§®‡§π‡•Ä‡§Ç? ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø ‡§â‡§®‡§ï‡•á ‡§™‡§æ‡§∏ ‡§∏‡•ç‡§ü‡•Ä‡§≤ ‡§ï‡•Ä ‡§®‡§∏‡•á‡§Ç ‡§π‡•à‡§Ç!",
            "üíª ‡§Æ‡•á‡§∞‡§æ ‡§ï‡§Ç‡§™‡•ç‡§Ø‡•Ç‡§ü‡§∞ ‡§è‡§ï ‡§π‡•Ä ‡§ó‡§æ‡§®‡§æ ‡§¨‡§ú‡§æ‡§§‡§æ ‡§∞‡§π‡§§‡§æ ‡§π‡•à... ‡§Ø‡§π ‡§è‡§ï ‡§°‡•á‡§≤ ‡§π‡•à!",
            "üì± ‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü‡§´‡•ã‡§® ‡§ï‡•ã ‡§ö‡§∂‡•ç‡§Æ‡•á ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§ï‡•ç‡§Ø‡•ã‡§Ç ‡§•‡•Ä? ‡§â‡§∏‡§®‡•á ‡§Ö‡§™‡§®‡•á ‡§∏‡§≠‡•Ä ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ñ‡•ã ‡§¶‡§ø‡§è!"
        ],
        'analysis': {
            'title': "‡§Æ‡§æ‡§®‡§∏‡§ø‡§ï ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£",
            'indicator': "‡§Ö‡§µ‡§∏‡§æ‡§¶ ‡§∏‡§Ç‡§ï‡•á‡§§‡§ï",
            'status': "‡§∏‡•ç‡§•‡§ø‡§§‡§ø",
            'factors': "‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Ø‡•ã‡§ó‡§¶‡§æ‡§® ‡§ï‡§æ‡§∞‡§ï",
            'increase': "‚Üë = ‡§Ö‡§µ‡§∏‡§æ‡§¶ ‡§ï‡•Ä ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§®‡§æ ‡§¨‡§¢‡§º‡§æ‡§§‡§æ ‡§π‡•à",
            'decrease': "‚Üì = ‡§Ö‡§µ‡§∏‡§æ‡§¶ ‡§ï‡•Ä ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§®‡§æ ‡§ï‡§Æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à"
        }
    },
    'te': {
        'welcome': "‡∞®‡∞Æ‡∞∏‡±ç‡∞ï‡∞æ‡∞∞‡∞Ç! ‡∞®‡±á‡∞®‡±Å ‡∞Æ‡±Ä ‡∞Æ‡∞æ‡∞®‡∞∏‡∞ø‡∞ï ‡∞Ü‡∞∞‡±ã‡∞ó‡±ç‡∞Ø‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞Æ‡∞¶‡±ç‡∞¶‡∞§‡±Å ‡∞á‡∞µ‡±ç‡∞µ‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞á‡∞ï‡±ç‡∞ï‡∞° ‡∞â‡∞®‡±ç‡∞®‡∞æ‡∞®‡±Å. ‡∞à‡∞∞‡±ã‡∞ú‡±Å ‡∞Æ‡±Ä‡∞ï‡±Å ‡∞é‡∞≤‡∞æ ‡∞Ö‡∞®‡∞ø‡∞™‡∞ø‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø?",
        'placeholder': "‡∞Æ‡±Ä ‡∞∏‡∞Ç‡∞¶‡±á‡∞∂‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞ü‡±à‡∞™‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø...",
        'quotes': [
            "‡∞∂‡∞æ‡∞Ç‡∞§‡∞ø ‡∞≤‡±ã‡∞™‡∞≤ ‡∞®‡±Å‡∞Ç‡∞°‡∞ø ‡∞µ‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø. ‡∞¶‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞¨‡∞Ø‡∞ü ‡∞µ‡±Ü‡∞§‡∞ï‡∞ï‡∞Ç‡∞°‡∞ø. üßò‚Äç‚ôÄÔ∏è",
            "‡∞∂‡±Ä‡∞§‡∞æ‡∞ï‡∞æ‡∞≤‡∞Ç ‡∞Æ‡∞ß‡±ç‡∞Ø‡∞≤‡±ã, ‡∞®‡∞æ‡∞≤‡±ã ‡∞í‡∞ï ‡∞Ö‡∞ú‡±á‡∞Ø ‡∞µ‡±á‡∞∏‡∞µ‡∞ø ‡∞â‡∞Ç‡∞¶‡∞®‡∞ø ‡∞®‡±á‡∞®‡±Å ‡∞ï‡∞®‡±Å‡∞ó‡±ä‡∞®‡±ç‡∞®‡∞æ‡∞®‡±Å. ‚ùÑÔ∏è‚òÄÔ∏è",
            "‡∞™‡±ç‡∞∞‡∞∏‡±ç‡∞§‡±Å‡∞§ ‡∞ï‡±ç‡∞∑‡∞£‡∞Ç ‡∞Æ‡∞æ‡∞§‡±ç‡∞∞‡∞Æ‡±á ‡∞Æ‡∞®‡∞ï‡±Å ‡∞Ö‡∞ß‡∞ø‡∞ï‡∞æ‡∞∞‡∞Ç ‡∞â‡∞®‡±ç‡∞® ‡∞∏‡∞Æ‡∞Ø‡∞Ç. ‚è∞",
            "‡∞∂‡∞æ‡∞Ç‡∞§‡∞ø‡∞®‡∞ø ‡∞™‡±Ä‡∞≤‡±ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø, ‡∞í‡∞§‡±ç‡∞§‡∞ø‡∞°‡∞ø‡∞®‡∞ø ‡∞µ‡∞¶‡∞ø‡∞≤‡±á‡∞Ø‡∞Ç‡∞°‡∞ø. üå¨Ô∏è",
            "‡∞∂‡∞æ‡∞Ç‡∞§‡∞Æ‡±à‡∞® ‡∞Æ‡∞®‡∞∏‡±ç‡∞∏‡±Å ‡∞Ö‡∞Ç‡∞§‡∞∞‡±ç‡∞ó‡∞§ ‡∞∂‡∞ï‡±ç‡∞§‡∞ø ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞Ü‡∞§‡±ç‡∞Æ‡∞µ‡∞ø‡∞∂‡±ç‡∞µ‡∞æ‡∞∏‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞§‡±Ü‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø. üí™"
        ],
        'jokes': [
            "ü§ñ ‡∞∞‡±ã‡∞¨‡±ã‡∞ü‡±ç‡∞≤‡±Å ‡∞é‡∞™‡±ç‡∞™‡±Å‡∞°‡±Ç ‡∞é‡∞Ç‡∞¶‡±Å‡∞ï‡±Å ‡∞≠‡∞Ø‡∞™‡∞°‡∞∞‡±Å? ‡∞é‡∞Ç‡∞¶‡±Å‡∞ï‡∞Ç‡∞ü‡±á ‡∞µ‡∞æ‡∞ü‡∞ø‡∞ï‡∞ø ‡∞â‡∞ï‡±ç‡∞ï‡±Å ‡∞®‡∞∞‡∞æ‡∞≤‡±Å ‡∞â‡∞Ç‡∞ü‡∞æ‡∞Ø‡∞ø!",
            "üíª ‡∞®‡∞æ ‡∞ï‡∞Ç‡∞™‡±ç‡∞Ø‡±Ç‡∞ü‡∞∞‡±ç ‡∞Ö‡∞¶‡±á ‡∞™‡∞æ‡∞ü‡∞®‡±Å ‡∞™‡±ç‡∞≤‡±á ‡∞ö‡±á‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø... ‡∞á‡∞¶‡∞ø ‡∞í‡∞ï ‡∞°‡±Ü‡∞≤‡±ç!",
            "üì± ‡∞∏‡±ç‡∞Æ‡∞æ‡∞∞‡±ç‡∞ü‡±ç‡∞´‡±ã‡∞®‡±ç‡∞ï‡±Å ‡∞ó‡±ç‡∞≤‡∞æ‡∞∏‡±Ü‡∞∏‡±ç ‡∞é‡∞Ç‡∞¶‡±Å‡∞ï‡±Å ‡∞Ö‡∞µ‡∞∏‡∞∞‡∞Ç? ‡∞Ö‡∞¶‡∞ø ‡∞§‡∞® ‡∞Ö‡∞®‡±ç‡∞®‡∞ø ‡∞ï‡∞æ‡∞Ç‡∞ü‡∞æ‡∞ï‡±ç‡∞ü‡±ç‡∞≤‡∞®‡±Å ‡∞ï‡±ã‡∞≤‡±ç‡∞™‡±ã‡∞Ø‡∞ø‡∞Ç‡∞¶‡∞ø!"
        ],
        'analysis': {
            'title': "‡∞Æ‡∞æ‡∞®‡∞∏‡∞ø‡∞ï ‡∞Ü‡∞∞‡±ã‡∞ó‡±ç‡∞Ø ‡∞µ‡∞ø‡∞∂‡±ç‡∞≤‡±á‡∞∑‡∞£",
            'indicator': "‡∞°‡∞ø‡∞™‡±ç‡∞∞‡±Ü‡∞∑‡∞®‡±ç ‡∞∏‡±Ç‡∞ö‡∞ø‡∞ï",
            'status': "‡∞∏‡±ç‡∞•‡∞ø‡∞§‡∞ø",
            'factors': "‡∞™‡±ç‡∞∞‡∞ß‡∞æ‡∞® ‡∞∏‡∞π‡∞æ‡∞Ø‡∞ï ‡∞ï‡∞æ‡∞∞‡∞ï‡∞æ‡∞≤‡±Å",
            'increase': "‚Üë = ‡∞°‡∞ø‡∞™‡±ç‡∞∞‡±Ü‡∞∑‡∞®‡±ç ‡∞∏‡∞Ç‡∞≠‡∞æ‡∞µ‡±ç‡∞Ø‡∞§‡∞®‡±Å ‡∞™‡±Ü‡∞Ç‡∞ö‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø",
            'decrease': "‚Üì = ‡∞°‡∞ø‡∞™‡±ç‡∞∞‡±Ü‡∞∑‡∞®‡±ç ‡∞∏‡∞Ç‡∞≠‡∞æ‡∞µ‡±ç‡∞Ø‡∞§‡∞®‡±Å ‡∞§‡∞ó‡±ç‡∞ó‡∞ø‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø"
        }
    },
    'es': {
        'welcome': "¬°Hola! Estoy aqu√≠ para apoyar tu salud mental. ¬øC√≥mo te sientes hoy?",
        'placeholder': "Escribe tu mensaje...",
        'quotes': [
            "La paz viene de dentro. No la busques fuera. üßò‚Äç‚ôÄÔ∏è",
            "En medio del invierno, encontr√© que hab√≠a dentro de m√≠ un verano invencible. ‚ùÑÔ∏è‚òÄÔ∏è",
            "El momento presente es el √∫nico tiempo sobre el que tenemos dominio. ‚è∞",
            "Respira paz, exhala estr√©s. üå¨Ô∏è",
            "La mente tranquila trae fuerza interior y autoconfianza. üí™"
        ],
        'jokes': [
            "ü§ñ ¬øPor qu√© los robots nunca se asustan? ¬°Porque tienen nervios de acero!",
            "üíª Mi computadora sigue tocando la misma canci√≥n... ¬°Es una Dell!",
            "üì± ¬øPor qu√© el smartphone necesitaba gafas? ¬°Perdi√≥ todos sus contactos!"
        ],
        'analysis': {
            'title': "An√°lisis de Salud Mental",
            'indicator': "Indicador de Depresi√≥n",
            'status': "Estado",
            'factors': "Factores Contribuyentes Clave",
            'increase': "‚Üë = aumenta la probabilidad de depresi√≥n",
            'decrease': "‚Üì = disminuye la probabilidad de depresi√≥n"
        }
    },
    'fr': {
        'welcome': "Bonjour ! Je suis ici pour soutenir votre sant√© mentale. Comment vous sentez-vous aujourd'hui ?",
        'placeholder': "Tapez votre message...",
        'quotes': [
            "La paix vient de l'int√©rieur. Ne la cherchez pas √† l'ext√©rieur. üßò‚Äç‚ôÄÔ∏è",
            "Au milieu de l'hiver, j'ai trouv√© qu'il y avait en moi un √©t√© invincible. ‚ùÑÔ∏è‚òÄÔ∏è",
            "Le moment pr√©sent est le seul temps sur lequel nous avons la domination. ‚è∞",
            "Inspirez la paix, expirez le stress. üå¨Ô∏è",
            "L'esprit calme apporte force int√©rieure et confiance en soi. üí™"
        ],
        'jokes': [
            "ü§ñ Pourquoi les robots ne paniquent-ils jamais ? Parce qu'ils ont des nerfs d'acier !",
            "üíª Mon ordinateur continue de jouer la m√™me chanson... C'est un Dell !",
            "üì± Pourquoi le smartphone avait-il besoin de lunettes ? Il a perdu tous ses contacts !"
        ],
        'analysis': {
            'title': "Analyse de la Sant√© Mentale",
            'indicator': "Indicateur de D√©pression",
            'status': "Statut",
            'factors': "Facteurs Contributifs Cl√©s",
            'increase': "‚Üë = augmente la probabilit√© de d√©pression",
            'decrease': "‚Üì = diminue la probabilit√© de d√©pression"
        }
    }
}

# Depression keywords with weights
depression_keywords = {
    'en': {
        'sad': 0.3, 'depressed': 0.7, 'hopeless': 0.8, 'lonely': 0.5, 'empty': 0.6,
        'worthless': 0.75, 'guilty': 0.4, 'tired': 0.3, 'suicide': 0.9, 'die': 0.8,
        'death': 0.7, 'pain': 0.5, 'cry': 0.4, 'miserable': 0.7, 'hate': 0.6,
        'failure': 0.5, 'anxiety': 0.6, 'worried': 0.4, 'stress': 0.5, 'overwhelmed': 0.6,
        'fatigue': 0.3, 'numb': 0.4, 'helpless': 0.7, 'despair': 0.8, 'grief': 0.6,
        'heartbroken': 0.7, 'lost': 0.5, 'alone': 0.6
    },
    'hi': {
        '‡§â‡§¶‡§æ‡§∏': 0.5, '‡§®‡§ø‡§∞‡§æ‡§∂': 0.7, '‡§Ö‡§ï‡•á‡§≤‡§æ': 0.6, '‡§•‡§ï‡§æ‡§®': 0.4, '‡§§‡§®‡§æ‡§µ': 0.5,
        '‡§ö‡§ø‡§Ç‡§§‡§æ': 0.6, '‡§¶‡•Å‡§ñ‡•Ä': 0.5, '‡§π‡§§‡§æ‡§∂': 0.7, '‡§ñ‡§æ‡§≤‡•Ä': 0.5, '‡§¨‡•á‡§ï‡§æ‡§∞': 0.7,
        '‡§¶‡•ã‡§∑‡•Ä': 0.4, '‡§•‡§ï‡§æ': 0.3, '‡§Ü‡§§‡•ç‡§Æ‡§π‡§§‡•ç‡§Ø‡§æ': 0.9, '‡§Æ‡§∞‡§®‡§æ': 0.8, '‡§Æ‡•å‡§§': 0.7,
        '‡§¶‡§∞‡•ç‡§¶': 0.5, '‡§∞‡•ã‡§®‡§æ': 0.4, '‡§¶‡•Å‡§ñ‡•Ä': 0.7, '‡§®‡§´‡§∞‡§§': 0.6, '‡§Ö‡§∏‡§´‡§≤': 0.5,
        '‡§ö‡§ø‡§Ç‡§§‡§æ': 0.6, '‡§ö‡§ø‡§Ç‡§§‡§ø‡§§': 0.4, '‡§§‡§®‡§æ‡§µ': 0.5, '‡§Ö‡§≠‡§ø‡§≠‡•Ç‡§§': 0.6, '‡§•‡§ï‡§æ‡§®': 0.3,
        '‡§∏‡•Å‡§®‡•ç‡§®': 0.4, '‡§≤‡§æ‡§ö‡§æ‡§∞': 0.7, '‡§®‡§ø‡§∞‡§æ‡§∂‡§æ': 0.8, '‡§∂‡•ã‡§ï': 0.6, '‡§ü‡•Ç‡§ü‡§æ': 0.7,
        '‡§ñ‡•ã‡§Ø‡§æ': 0.5, '‡§Ö‡§ï‡•á‡§≤‡§æ': 0.6
    },
    'te': {
        '‡∞µ‡∞ø‡∞ö‡∞æ‡∞∞‡∞Ç‡∞ó‡∞æ': 0.5, '‡∞®‡∞ø‡∞∞‡∞æ‡∞∂': 0.7, '‡∞í‡∞Ç‡∞ü‡∞∞‡∞ø‡∞ó‡∞æ': 0.6, '‡∞Ö‡∞≤‡∞∏‡∞ü': 0.4, '‡∞í‡∞§‡±ç‡∞§‡∞ø‡∞°‡∞ø': 0.5,
        '‡∞Ü‡∞Ç‡∞¶‡±ã‡∞≥‡∞®': 0.6, '‡∞¶‡±Å‡∞É‡∞ñ‡∞Ç‡∞§‡±ã': 0.5, '‡∞®‡∞ø‡∞∏‡±ç‡∞™‡±É‡∞π': 0.7, '‡∞ñ‡∞æ‡∞≥‡±Ä‡∞ó‡∞æ': 0.5, '‡∞™‡∞®‡∞ø‡∞ï‡∞ø‡∞∞‡∞æ‡∞®‡∞ø': 0.7,
        '‡∞Ö‡∞™‡∞∞‡∞æ‡∞ß‡∞ø': 0.4, '‡∞Ö‡∞≤‡∞∏‡∞ø‡∞®': 0.3, '‡∞Ü‡∞§‡±ç‡∞Æ‡∞π‡∞§‡±ç‡∞Ø': 0.9, '‡∞ö‡∞®‡∞ø‡∞™‡±ã‡∞µ‡±Å': 0.8, '‡∞Æ‡∞∞‡∞£‡∞Ç': 0.7,
        '‡∞®‡±ä‡∞™‡±ç‡∞™‡∞ø': 0.5, '‡∞è‡∞°‡±Å‡∞ö‡±Å': 0.4, '‡∞¶‡±Å‡∞∞‡±ç‡∞≠‡∞∞‡∞Æ‡±à‡∞®': 0.7, '‡∞¶‡±ç‡∞µ‡±á‡∞∑‡∞Ç': 0.6, '‡∞µ‡∞ø‡∞´‡∞≤‡∞Ç': 0.5,
        '‡∞Ü‡∞Ç‡∞¶‡±ã‡∞≥‡∞®': 0.6, '‡∞Ü‡∞Ç‡∞¶‡±ã‡∞≥‡∞®‡∞ï‡±Å': 0.4, '‡∞í‡∞§‡±ç‡∞§‡∞ø‡∞°‡∞ø': 0.5, '‡∞Æ‡±Å‡∞Ç‡∞ö‡±Ü‡∞§‡±ç‡∞§‡∞ø‡∞®': 0.6, '‡∞Ö‡∞≤‡∞∏‡∞ü': 0.3,
        '‡∞∏‡±Å‡∞®‡±ç‡∞®‡∞Ç': 0.4, '‡∞®‡∞ø‡∞∏‡±ç‡∞∏‡∞π‡∞æ‡∞Ø‡∞Ç‡∞ó‡∞æ': 0.7, '‡∞π‡∞§‡∞æ‡∞∂': 0.8, '‡∞¶‡±Å‡∞É‡∞ñ‡∞Ç': 0.6, '‡∞®‡±ä‡∞ï‡±ç‡∞ï‡∞ø‡∞®': 0.7,
        '‡∞™‡±ã‡∞Ø‡∞ø‡∞®': 0.5, '‡∞í‡∞Ç‡∞ü‡∞∞‡∞ø‡∞ó‡∞æ': 0.6
    }
}

# Positive keywords with weights
positive_keywords = {
    'en': {
        'happy': -0.5, 'joy': -0.6, 'good': -0.4, 'great': -0.5, 'excited': -0.4,
        'love': -0.7, 'hope': -0.6, 'better': -0.4, 'improve': -0.3, 'progress': -0.3,
        'peace': -0.5, 'calm': -0.4, 'relaxed': -0.4, 'content': -0.5, 'grateful': -0.6,
        'thankful': -0.5, 'optimistic': -0.6, 'confident': -0.5, 'proud': -0.4, 'success': -0.5
    },
    'hi': {
        '‡§ñ‡•Å‡§∂': -0.5, '‡§Ü‡§®‡§Ç‡§¶': -0.6, '‡§Ö‡§ö‡•ç‡§õ‡§æ': -0.4, '‡§Æ‡§π‡§æ‡§®': -0.5, '‡§â‡§§‡•ç‡§∏‡§æ‡§π‡§ø‡§§': -0.4,
        '‡§™‡•ç‡§∞‡•á‡§Æ': -0.7, '‡§Ü‡§∂‡§æ': -0.6, '‡§¨‡•á‡§π‡§§‡§∞': -0.4, '‡§∏‡•Å‡§ß‡§æ‡§∞': -0.3, '‡§™‡•ç‡§∞‡§ó‡§§‡§ø': -0.3,
        '‡§∂‡§æ‡§Ç‡§§‡§ø': -0.5, '‡§∂‡§æ‡§Ç‡§§': -0.4, '‡§Ü‡§∞‡§æ‡§Æ': -0.4, '‡§∏‡§Ç‡§§‡•Å‡§∑‡•ç‡§ü': -0.5, '‡§Ü‡§≠‡§æ‡§∞‡•Ä': -0.6,
        '‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶': -0.5, '‡§Ü‡§∂‡§æ‡§µ‡§æ‡§¶‡•Ä': -0.6, '‡§Ü‡§§‡•ç‡§Æ‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏': -0.5, '‡§ó‡§∞‡•ç‡§µ': -0.4, '‡§∏‡§´‡§≤‡§§‡§æ': -0.5
    },
    'te': {
        '‡∞∏‡∞Ç‡∞§‡±ã‡∞∑‡∞Ç‡∞ó‡∞æ': -0.5, '‡∞Ü‡∞®‡∞Ç‡∞¶‡∞Ç': -0.6, '‡∞Æ‡∞Ç‡∞ö‡∞ø': -0.4, '‡∞ó‡±ä‡∞™‡±ç‡∞™': -0.5, '‡∞â‡∞§‡±ç‡∞∏‡∞æ‡∞π‡∞Ç‡∞§‡±ã': -0.4,
        '‡∞™‡±ç‡∞∞‡±á‡∞Æ': -0.7, '‡∞Ü‡∞∂': -0.6, '‡∞Æ‡±Ü‡∞∞‡±Å‡∞ó‡±ç‡∞ó‡∞æ': -0.4, '‡∞Æ‡±Ü‡∞∞‡±Å‡∞ó‡±Å‡∞™‡∞∞‡∞ö‡±Å': -0.3, '‡∞™‡±Å‡∞∞‡±ã‡∞ó‡∞§‡∞ø': -0.3,
        '‡∞∂‡∞æ‡∞Ç‡∞§‡∞ø': -0.5, '‡∞∂‡∞æ‡∞Ç‡∞§‡∞Ç‡∞ó‡∞æ': -0.4, '‡∞µ‡∞ø‡∞∂‡±ç‡∞∞‡∞æ‡∞Ç‡∞§‡∞ø': -0.4, '‡∞ï‡∞Ç‡∞ü‡±Ü‡∞Ç‡∞ü‡±ç': -0.5, '‡∞ï‡±É‡∞§‡∞ú‡±ç‡∞û‡∞§': -0.6,
        '‡∞ß‡∞®‡±ç‡∞Ø‡∞µ‡∞æ‡∞¶‡∞æ‡∞≤‡±Å': -0.5, '‡∞Ü‡∞∂‡∞æ‡∞µ‡∞æ‡∞¶‡∞Ç': -0.6, '‡∞Ü‡∞§‡±ç‡∞Æ‡∞µ‡∞ø‡∞∂‡±ç‡∞µ‡∞æ‡∞∏‡∞Ç': -0.5, '‡∞ó‡∞∞‡±ç‡∞µ‡∞Ç‡∞ó‡∞æ': -0.4, '‡∞µ‡∞ø‡∞ú‡∞Ø‡∞Ç': -0.5
    }
}

# Negation words
negation_words = {
    'en': ['not', 'no', 'never', 'don\'t', 'doesn\'t', 'cant', 'cannot', 'won\'t', 'isnt', 'aren\'t'],
    'hi': ['‡§®‡§π‡•Ä‡§Ç', '‡§Æ‡§§', '‡§ï‡§≠‡•Ä ‡§®‡§π‡•Ä‡§Ç', '‡§®', '‡§Æ‡•à‡§Ç ‡§®‡§π‡•Ä‡§Ç', '‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡§§‡§æ'],
    'te': ['‡∞ï‡∞æ‡∞¶‡±Å', '‡∞è‡∞Æ‡∞æ‡∞§‡±ç‡∞∞‡∞Ç', '‡∞é‡∞™‡±ç‡∞™‡±Å‡∞°‡±Ç', '‡∞≤‡±á‡∞¶‡±Å', '‡∞®‡±á‡∞®‡±Å ‡∞ï‡∞æ‡∞¶‡±Å', '‡∞ö‡±á‡∞Ø‡∞∞‡±Å']
}

# Error messages
error_messages = {
    'en': {
        'voice_error': "Sorry, there was an error with voice recognition. Please try again.",
        'no_messages': "No messages to read yet.",
        'api_error': "Sorry, I'm having trouble connecting to the service. Please try again later."
    },
    'hi': {
        'voice_error': "‡§ï‡•ç‡§∑‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç, ‡§ß‡•ç‡§µ‡§®‡§ø ‡§™‡§π‡§ö‡§æ‡§® ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•Å‡§à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§",
        'no_messages': "‡§Ö‡§≠‡•Ä ‡§§‡§ï ‡§ï‡•ã‡§à ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§",
        'api_error': "‡§ï‡•ç‡§∑‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç, ‡§Æ‡•Å‡§ù‡•á ‡§∏‡•á‡§µ‡§æ ‡§∏‡•á ‡§ú‡•Å‡§°‡§º‡§®‡•á ‡§Æ‡•á‡§Ç ‡§™‡§∞‡•á‡§∂‡§æ‡§®‡•Ä ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§"
    },
    'te': {
        'voice_error': "‡∞ï‡±ç‡∞∑‡∞Æ‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø, ‡∞µ‡∞æ‡∞Ø‡∞ø‡∞∏‡±ç ‡∞ó‡±Å‡∞∞‡±ç‡∞§‡∞ø‡∞Ç‡∞™‡±Å‡∞≤‡±ã ‡∞≤‡±ã‡∞™‡∞Ç ‡∞è‡∞∞‡±ç‡∞™‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø. ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞Æ‡∞≥‡±ç‡∞≤‡±Ä ‡∞™‡±ç‡∞∞‡∞Ø‡∞§‡±ç‡∞®‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø.",
        'no_messages': "‡∞á‡∞Ç‡∞ï‡∞æ ‡∞ö‡∞¶‡∞µ‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞∏‡∞Ç‡∞¶‡±á‡∞∂‡∞æ‡∞≤‡±Å ‡∞≤‡±á‡∞µ‡±Å.",
        'api_error': "‡∞ï‡±ç‡∞∑‡∞Æ‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø, ‡∞∏‡±á‡∞µ‡∞ï‡±Å ‡∞ï‡∞®‡±Ü‡∞ï‡±ç‡∞ü‡±ç ‡∞Ö‡∞µ‡±ç‡∞µ‡∞°‡∞Ç‡∞≤‡±ã ‡∞®‡∞æ‡∞ï‡±Å ‡∞á‡∞¨‡±ç‡∞¨‡∞Ç‡∞¶‡∞ø ‡∞â‡∞Ç‡∞¶‡∞ø. ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞§‡∞∞‡±ç‡∞µ‡∞æ‡∞§ ‡∞Æ‡∞≥‡±ç‡∞≤‡±Ä ‡∞™‡±ç‡∞∞‡∞Ø‡∞§‡±ç‡∞®‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø."
    }
}

def translate_text(text, dest_lang):
    try:
        translator = GoogleTranslator(source='auto', target=dest_lang)
        translated = translator.translate(text)
        return translated
    except Exception as e:
        print(f"Translation error: {e}")
        return text

def analyze_message(message, lang):
    # Tokenize the message into sentences and words
    sentences = message.lower().split('.')
    score = 0
    contributing_words = []
    
    for sentence in sentences:
        words = sentence.strip().split()
        has_negation = False
        
        # Check for negations in the sentence
        for word in words:
            clean_word = word.strip('.,!?')
            if clean_word in negation_words.get(lang, negation_words['en']):
                has_negation = True
                break
        
        # Analyze each word
        for word in words:
            clean_word = word.strip('.,!?')
            
            # Check depression keywords
            if clean_word in depression_keywords.get(lang, depression_keywords['en']):
                contribution = depression_keywords[lang][clean_word]
                if has_negation:
                    contribution = -contribution
                score += contribution
                contributing_words.append({
                    'word': clean_word,
                    'contribution': contribution,
                    'positive': has_negation,
                    'context': 'Negated' if has_negation else 'Direct'
                })
            
            # Check positive keywords
            elif clean_word in positive_keywords.get(lang, positive_keywords['en']):
                contribution = positive_keywords[lang][clean_word]
                if has_negation:
                    contribution = -contribution
                score += contribution
                contributing_words.append({
                    'word': clean_word,
                    'contribution': -contribution if not has_negation else contribution,
                    'positive': not has_negation,
                    'context': 'Negated' if has_negation else 'Direct'
                })
    
    # Normalize score to 0-100%
    score = min(max((score + 1) * 50, 0), 100)
    
    # Sort contributing words by absolute contribution
    contributing_words.sort(key=lambda x: abs(x['contribution']), reverse=True)
    
    # Take top 5 contributing words
    top_contributors = contributing_words[:5]
    
    # Determine depression level
    if score < 30:
        depression_level = "Depression Low risk"
    elif score < 60:
        depression_level = "Depression Moderate risk"
    else:
        depression_level = "Depression High risk"
    
    # Translate depression level if not English
    if lang != 'en':
        depression_level = translate_text(depression_level, lang)
    
    return {
        'score': score,
        'isDepressed': score >= 50,
        'depressionLevel': depression_level,
        'topContributors': top_contributors
    }

def get_bot_response(message, analysis, lang):
    # Fallback responses if API fails
    fallback_responses = {
        'en': {
            'depressed': "I hear that you're struggling. Remember, it's okay to feel this way. Would you like to talk more about what's on your mind?",
            'not_depressed': "Thanks for sharing how you're feeling. I'm here to listen if you'd like to talk more."
        },
        'hi': {
            'depressed': "‡§Æ‡•à‡§Ç ‡§∏‡§Æ‡§ù‡§§‡§æ ‡§π‡•Ç‡§Ç ‡§ï‡§ø ‡§Ü‡§™ ‡§∏‡§Ç‡§ò‡§∞‡•ç‡§∑ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç‡•§ ‡§Ø‡§æ‡§¶ ‡§∞‡§ñ‡•á‡§Ç, ‡§á‡§∏ ‡§§‡§∞‡§π ‡§Æ‡§π‡§∏‡•Ç‡§∏ ‡§ï‡§∞‡§®‡§æ ‡§†‡•Ä‡§ï ‡§π‡•à‡•§ ‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§Ö‡§™‡§®‡•á ‡§Æ‡§® ‡§ï‡•Ä ‡§¨‡§æ‡§§ ‡§î‡§∞ ‡§Ö‡§ß‡§ø‡§ï ‡§∏‡§æ‡§ù‡§æ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡•á‡§Ç‡§ó‡•á?",
            'not_depressed': "‡§Ö‡§™‡§®‡•Ä ‡§≠‡§æ‡§µ‡§®‡§æ‡§ì‡§Ç ‡§ï‡•ã ‡§∏‡§æ‡§ù‡§æ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶‡•§ ‡§Ø‡§¶‡§ø ‡§Ü‡§™ ‡§î‡§∞ ‡§¨‡§æ‡§§ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç ‡§§‡•ã ‡§Æ‡•à‡§Ç ‡§Ø‡§π‡§æ‡§Ç ‡§∏‡•Å‡§®‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•Ç‡§Ç‡•§"
        },
        'te': {
            'depressed': "‡∞Æ‡±Ä‡∞∞‡±Å ‡∞ï‡∞∑‡±ç‡∞ü‡∞™‡∞°‡±Å‡∞§‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞∞‡∞®‡∞ø ‡∞®‡±á‡∞®‡±Å ‡∞µ‡∞ø‡∞®‡±ç‡∞®‡∞æ‡∞®‡±Å. ‡∞ó‡±Å‡∞∞‡±ç‡∞§‡±Å‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø, ‡∞à ‡∞µ‡∞ø‡∞ß‡∞Ç‡∞ó‡∞æ ‡∞Ö‡∞®‡±Å‡∞≠‡±Ç‡∞§‡∞ø ‡∞ö‡±Ü‡∞Ç‡∞¶‡∞°‡∞Ç ‡∞∏‡∞∞‡±á. ‡∞Æ‡±Ä ‡∞Æ‡∞®‡∞∏‡±ç‡∞∏‡±Å‡∞≤‡±ã ‡∞â‡∞®‡±ç‡∞® ‡∞¶‡∞æ‡∞®‡∞ø ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø ‡∞Æ‡∞∞‡∞ø‡∞Ç‡∞§ ‡∞Æ‡∞æ‡∞ü‡±ç‡∞≤‡∞æ‡∞°‡∞æ‡∞≤‡∞®‡±Å‡∞ï‡±Å‡∞Ç‡∞ü‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞∞‡∞æ?",
            'not_depressed': "‡∞Æ‡±Ä‡∞∞‡±Å ‡∞é‡∞≤‡∞æ ‡∞Ö‡∞®‡±Å‡∞≠‡±Ç‡∞§‡∞ø ‡∞ö‡±Ü‡∞Ç‡∞¶‡±Å‡∞§‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞∞‡±ã ‡∞™‡∞Ç‡∞ö‡±Å‡∞ï‡±Å‡∞®‡±ç‡∞®‡∞Ç‡∞¶‡±Å‡∞ï‡±Å ‡∞ß‡∞®‡±ç‡∞Ø‡∞µ‡∞æ‡∞¶‡∞æ‡∞≤‡±Å. ‡∞Æ‡±Ä‡∞∞‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ç‡∞§ ‡∞Æ‡∞æ‡∞ü‡±ç‡∞≤‡∞æ‡∞°‡∞æ‡∞≤‡∞®‡±Å‡∞ï‡±Å‡∞Ç‡∞ü‡±á ‡∞®‡±á‡∞®‡±Å ‡∞µ‡∞ø‡∞®‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞á‡∞ï‡±ç‡∞ï‡∞° ‡∞â‡∞®‡±ç‡∞®‡∞æ‡∞®‡±Å."
        }
    }
    
    if analysis['isDepressed']:
        return fallback_responses[lang]['depressed']
    else:
        return fallback_responses[lang]['not_depressed']

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/send_message', methods=['POST'])
def send_message():
    data = request.get_json()
    message = data['message']
    lang = data.get('lang', 'en')
    
    # Analyze the message
    analysis = analyze_message(message, lang)
    
    # Get bot response
    response = get_bot_response(message, analysis, lang)
    
    # Get random quote and joke
    quote = random.choice(language_content[lang]['quotes'])
    joke = random.choice(language_content[lang]['jokes'])
    
    return jsonify({
        'response': response,
        'analysis': analysis,
        'quote': quote,
        'joke': joke
    })

@app.route('/get_language_content', methods=['POST'])
def get_language_content():
    lang = request.json.get('lang', 'en')
    return jsonify(language_content.get(lang, language_content['en']))

@app.route('/translate_content', methods=['POST'])
def translate_content():
    data = request.get_json()
    text = data.get('text', '')
    target_lang = data.get('lang', 'en')
    
    if not text:
        return jsonify({'translated': ''})
    
    try:
        translated_text = translate_text(text, target_lang)
        return jsonify({'translated': translated_text})
    except Exception as e:
        print(f"Translation error: {e}")
        return jsonify({'translated': text})

@app.route('/translate_conversation', methods=['POST'])
def translate_conversation():
    data = request.get_json()
    messages = data.get('messages', [])
    target_lang = data.get('lang', 'en')
    
    if not messages:
        return jsonify({'translated_messages': []})
    
    try:
        translated_messages = []
        for message in messages:
            translated_text = translate_text(message, target_lang)
            translated_messages.append(translated_text)
        
        return jsonify({'translated_messages': translated_messages})
    except Exception as e:
        print(f"Conversation translation error: {e}")
        return jsonify({'translated_messages': messages})

@app.route('/translate_ui_content', methods=['POST'])
def translate_ui_content():
    data = request.get_json()
    content = data.get('content', {})
    target_lang = data.get('lang', 'en')
    
    if not content:
        return jsonify({'translated_content': {}})
    
    try:
        translated_content = {}
        for key, text in content.items():
            if isinstance(text, str):
                translated_content[key] = translate_text(text, target_lang)
            elif isinstance(text, list):
                translated_content[key] = [translate_text(item, target_lang) for item in text]
            else:
                translated_content[key] = text
        
        return jsonify({'translated_content': translated_content})
    except Exception as e:
        print(f"UI content translation error: {e}")
        return jsonify({'translated_content': content})

@app.route('/text_to_speech', methods=['POST'])
def text_to_speech():
    data = request.get_json()
    text = data.get('text', '')
    lang = data.get('lang', 'en')
    
    if not text:
        return jsonify({'error': 'No text provided'}), 400
    
    try:
        # Get the language code for TTS
        tts_lang = language_codes.get(lang, 'en')
        
        # Create TTS object
        tts = gTTS(text=text, lang=tts_lang, slow=False)
        
        # Create a temporary file
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.mp3')
        temp_file.close()
        
        # Save the audio to the temporary file
        tts.save(temp_file.name)
        
        # Return the audio file
        return send_file(
            temp_file.name,
            mimetype='audio/mpeg',
            as_attachment=True,
            download_name='speech.mp3'
        )
        
    except Exception as e:
        print(f"Text to speech error: {e}")
        return jsonify({'error': 'Failed to generate speech'}), 500

@app.route('/speak_text', methods=['POST'])
def speak_text():
    data = request.get_json()
    text = data.get('text', '')
    lang = data.get('lang', 'en')
    
    if not text:
        return jsonify({'error': 'No text provided'}), 400
    
    try:
        # Get the language code for TTS
        tts_lang = language_codes.get(lang, 'en')
        
        # Create TTS object
        tts = gTTS(text=text, lang=tts_lang, slow=False)
        
        # Create audio data in memory
        audio_buffer = io.BytesIO()
        tts.write_to_fp(audio_buffer)
        audio_buffer.seek(0)
        
        # Return the audio data
        return send_file(
            audio_buffer,
            mimetype='audio/mpeg',
            as_attachment=True,
            download_name='speech.mp3'
        )
        
    except Exception as e:
        print(f"Text to speech error: {e}")
        return jsonify({'error': 'Failed to generate speech'}), 500

@app.route('/get_available_languages', methods=['GET'])
def get_available_languages():
    """Return list of available languages for TTS"""
    languages = {
        'en': 'English',
        'hi': '‡§π‡§ø‡§Ç‡§¶‡•Ä (Hindi)',
        'te': '‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å (Telugu)',
        'es': 'Espa√±ol (Spanish)',
        'fr': 'Fran√ßais (French)',
        'de': 'Deutsch (German)',
        'it': 'Italiano (Italian)',
        'pt': 'Portugu√™s (Portuguese)',
        'ru': '–†—É—Å—Å–∫–∏–π (Russian)',
        'ja': 'Êó•Êú¨Ë™û (Japanese)',
        'ko': 'ÌïúÍµ≠Ïñ¥ (Korean)',
        'zh': '‰∏≠Êñá (Chinese)',
        'ar': 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ© (Arabic)',
        'bn': '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ (Bengali)',
        'ur': 'ÿßÿ±ÿØŸà (Urdu)',
        'ta': '‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç (Tamil)',
        'ml': '‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç (Malayalam)',
        'kn': '‡≤ï‡≤®‡≥ç‡≤®‡≤° (Kannada)',
        'gu': '‡™ó‡´Å‡™ú‡™∞‡™æ‡™§‡´Ä (Gujarati)',
        'pa': '‡®™‡©∞‡®ú‡®æ‡®¨‡©Ä (Punjabi)'
    }
    return jsonify(languages)

if __name__ == '__main__':
    app.run(debug=True)